import json
import os
import socket
import logging
from http.server import HTTPServer, BaseHTTPRequestHandler
from typing import Dict, Any, Tuple, Optional
from datetime import datetime


logging_format = '%(asctime)s - %(levelname)s - %(message)s'
logging.basicConfig(level=logging.INFO, format=logging_format)
logger = logging.getLogger('echo_service')


def fetch_system_info() -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç–∞—Ö.

    –§—É–Ω–∫—Ü–∏—è —Å–æ–±–∏—Ä–∞–µ—Ç –∏–º—è —Ö–æ—Å—Ç–∞, IP-–∞–¥—Ä–µ—Å –∏ –∏–º—è –∞–≤—Ç–æ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
    –¢–∞–∫–∂–µ, –Ω–∞ –≤—Å—è–∫–∏–π, –¥–æ–±–∞–≤–∏–ª –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ü–µ–ª–µ–π –æ—Ç–ª–∞–¥–∫–∏.
    """
    hostname = socket.gethostname()
    
    try:
        temp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        temp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        temp_socket.connect(("8.8.8.8", 80)) 
        ip_address = temp_socket.getsockname()[0]
        temp_socket.close()
    except Exception:
        ip_address = socket.gethostbyname(hostname)
    
    author = os.environ.get('AUTHOR', 'Unknown')
    
    system_data = {
        "hostname": hostname,
        "ip_address": ip_address,
        "author": author,
        "timestamp": datetime.now().isoformat(),
    }
    
    return system_data


class EchoResponder(BaseHTTPRequestHandler):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ.

    –†–µ—à–∏–ª –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—Ä–µ–π–º–≤–æ—Ä–∫, —á—Ç–æ–±—ã –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –Ω–æ –æ—Å—Ç–∞–≤–∏–ª –º–æ–¥—É–ª—å–Ω–æ—Å—Ç—å.
    """
    
    def _set_json_headers(self) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è JSON-–∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        self.send_response(200)
        self.send_header('Content-Type', 'application/json')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.end_headers()
    
    def _build_response(self) -> bytes:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç JSON-–æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏—Å—Ç–µ–º–µ.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–π—Ç—ã, –≥–æ—Ç–æ–≤—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –≤—ã—Ö–æ–¥–Ω–æ–π –ø–æ—Ç–æ–∫.
        """
        info = fetch_system_info()
        logger.info(f"Serving request from {info['hostname']} ({info['ip_address']})")
        return json.dumps(info, indent=2).encode('utf-8')
    
    def do_GET(self) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ GET-–∑–∞–ø—Ä–æ—Å—ã –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø—É—Ç–∏"""
        self._set_json_headers()
        self.wfile.write(self._build_response())
    
    def log_message(self, format: str, *args: Any) -> None:
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ –ª–æ–≥–≥–µ—Ä–∞"""
        logger.info(f"{self.client_address[0]} - {format % args}")


def launch_server(port: int = 8000, bind_addr: str = '0.0.0.0') -> None:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç HTTP-—Å–µ—Ä–≤–µ—Ä –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—Ç—É.

    Args:
        port: TCP-–ø–æ—Ä—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 8000)
        bind_addr: –ê–¥—Ä–µ—Å –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –≤—Å–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã)
    """
    server_address = (bind_addr, port)
    httpd = HTTPServer(server_address, EchoResponder)
    
    logger.info(f"üöÄ Echo server starting on http://{bind_addr}:{port}")
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        logger.info("Keyboard interrupt received, shutting down...")
    finally:
        httpd.server_close()
        logger.info("Server stopped.")


if __name__ == "__main__":
    launch_server() 